# Напишите класс Trigon, для инициализации передаётся неизвестное кол-во атрибутов

# В классе при инициализации происходит проверка на корректность переданных данных и генерируются следующие исключения:

# 1) Если хотя бы одна сторона передана не числом,
# то падаем с TypeError и текстом 'Стороны должны быть числами'

# 2) Если хотя бы одна сторона передана нулем или отрицательным числом,
# то падаем с ValueError и текстом 'Стороны должны быть положительными'

# 3) Если не соблюдается неравество треугольника,
# то Exception и текст "Не треугольник"

# 4) Если передано не 3 аргумента, то IndexError "Передано {n} аргументов, а ожидается 3", где n - кол-во аргументов

import unittest  # Не удалять


# Здесь пишем код
class Trigon:
    """Класс Trigon используется для проверки правильности треугольника

        Attributes
        ----------
        a : int | float
            Первая сторона треугольника
        b : int | float
            Вторая сторона треугольника
        c : int | float
            Третья сторона треугольника

        Methods
        -------
        __is_validate_sides()
            Проверяет на корректность стороны треугольника и генерирует соответствующие исключения.
            Если исключение не возникает, возвращает стороны треугольника и передает в конструтор
        """
    def __init__(self, *args):
        self.__a, self.__b, self.__c = self.__is_validate_sides(*args)

    @staticmethod
    def __is_validate_sides(*args):
        """
        Метод, который проверяет на корректность стороны треугольника и генерирует соответствующие исключения.
        Если исключение не возникает, возвращает стороны треугольника и передает в конструтор
        :param args: стороны треугольника
        :return: исключение с описанием ошибки
        """
        for side in args:
            if type(side) not in (int, float):
                raise TypeError(f"Стороны должны быть числами")
            if side < 1:
                raise ValueError(f"Стороны должны быть положительными")

        if len(args) != 3:
            raise IndexError(f"Передано {len(args)} аргументов, а ожидается 3")

        a, b, c = args
        if not (a < b + c and b < a + c and c < b + a):
            raise Exception("Не треугольник")
        return a, b, c

# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


class MyTestCase(unittest.TestCase):

    def test(self):
        data = [(3, '7', 5), (-3, 7, 5), (2, 5, 2), (3, 4, 5, 6), (3, 4), (3, 4, 5)]

        test_data = [('Стороны должны быть числами', 'TypeError'),
                     ('Стороны должны быть положительными', 'ValueError'),
                     ("Не треугольник", 'Exception'),
                     ("Передано 4 аргументов, а ожидается 3", 'IndexError'),
                     ("Передано 2 аргументов, а ожидается 3", 'IndexError'),
                     0]
        for i, d in enumerate(data):
            try:
                Trigon(*data[i])
            except Exception as e:
                assert e.args[0] == test_data[i][0], 'Исключение имеет неправильный текст'
                assert type(e).__name__ == test_data[i][1], 'У исключения неправильный тип'

        print('Всё ок')


if __name__ == '__main__':
    unittest.main()
